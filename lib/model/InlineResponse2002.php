<?php
/**
 * InlineResponse2002
 *
 * PHP version 5
 *
 * @category Class
 * @package  daxslab\enzona\qr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * QRAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace daxslab\enzona\qr\model;

use \ArrayAccess;
use \daxslab\enzona\qr\ObjectSerializer;

/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category Class
 * @package  daxslab\enzona\qr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vendor_identity_code' => 'string',
        'create_at' => '\DateTime',
        'update_at' => '\DateTime',
        'image' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vendor_identity_code' => null,
        'create_at' => 'date-time',
        'update_at' => 'date-time',
        'image' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vendor_identity_code' => 'vendor_identity_code',
        'create_at' => 'create_at',
        'update_at' => 'update_at',
        'image' => 'image'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vendor_identity_code' => 'setVendorIdentityCode',
        'create_at' => 'setCreateAt',
        'update_at' => 'setUpdateAt',
        'image' => 'setImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vendor_identity_code' => 'getVendorIdentityCode',
        'create_at' => 'getCreateAt',
        'update_at' => 'getUpdateAt',
        'image' => 'getImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VENDOR_IDENTITY_CODE__078B46087C11EC4EE282DD243814063C1D = '078b46087c11ec4ee282dd243814063c1d';
    const IMAGE_I_VBO_RW0_K_GGO_AAAANS_UH_E_UG_AAAV4_AAA_FE_CAYAAADNK3CA_AAAXQ_UL_EQVR42U3D6_ZNV5_Z3_A8_T_MZ_NXBV_JGYF5_PZ_V_LZBT7_MVK_WM5L_VQ_UJ_VB_VTLZHD_MH0_US_DE1_SI_IMO_UFU_SIY_CY_IGIGO_HV_BX_QR_TJ_EI_XSD_CM0_YNNNL3_TTO735JN3_XJQQFNRA3XZR_XQQM577J3DFC7N_PN36N_ES_WKQ_TL_WU_ZB_I_ENGL_S_TW_SP_LAK0NGL_SSBV5_LAK0K_CRY_SBV5_LAK0K_CRY_SBV5_IE_XKK_CRY_Q_JV_JIE_XKK_CRY_Q_JV_JIE_XKK_SE_CU_JV_J_IK8_EO_SE_CU_JV_J_IK8_EO_SE_CVJ4_J_UK8_EQ_SW_CT_J4_J_UK8_EQ_SW_CT_J4_J_UKG_VE_SW_CT_J_AQ8KG_VE_SW_CT_J_AQ8KG_VE_SBF5_J_AQ8KQBRHZB_KSPSELVOV9FE0NTB592NAC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OA_FRW0_HV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_BO14_ZD6TF7B_BW_OHZ_VVJ2_HD6XO_M_XV_OC14_M_XV_OAFL3J_BC17WGHE84_PWN_BY94W_WVB68_NB7ZG_BS94FE_PBC17W2VBC17WGHE84_K1_WU_OP9X3_EBSGVFW4_A_UVE_MEL_XV_CCF7ZG_BA9_B7ZG_BS94W_QTE8_II_XV_OAFL3HT_OOAFL3J_BC17WGHE84_A_WV_D_QE84_A_UVE_M_FBN_RT_OTC_NZ7D_X7ZX84_A_UVE_M_FRW_GV_D_QE84_LXG_BE84_A_UVE_O04_L_XHG_BE89HWGHE84_A_UVE_M_FRWW_EVE_O04_L_XH2_PHA6C_P_XV_CC1WT1_VL6_VV_PB7ZGTE_GAF7Z2_HCCF7ZG_BS94W_QTE8_ILXG_NE_GW54W_QTE8_II_XV_OA_FR0_HV_D_YC8_II_XV_OAFL3J_BC17WGTC_TR33_C_OD3R_VK_XM_NT7G_NE_GW54W_QTE8_II_XV_OA_FR0FV_D_YC8_ILXG_NE33JWGHE89NWGHE84_LXG_NC3_HRZG_BA1_BY94W_QTEW94P2DRV_RR6_T_BAVRA_XRX9_B7ZGTE_NB_HRZG_BS94_LQ9E8_IL_XHG_M_OY4_M_XV_OA_FRXBC17WGTFYLGCVE_MEL_XSU_DF7ZG_BAL_LWAAQ9_YMN2M_GY7PPPF76_BV6_BF7ZG_F_XJ_BC17W_CRW_CL3J_BC16_BF7ZG_F_XG_F_XV_CCF7W_CL3J_BKCCF7ZG_BS946X_WU6D4X_LXYTF7_EUO3W_VFR_X5W_IK8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_GS_X3UNEC_OR9IA_H_SF76EE_GR7_AH_PWGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_VUS_FB6JLFP8_FF7JLR_TZ_VVNDF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC97QHA_HS4AN3_F5QU9_RDARBT2WUHGXE84_A_UVE_MEL_XV_CCF7ZGT_WOBF7ZG_BS94W_WV_D_BI94W_WV_H_AQT_A7ZG_BS94W_QTE8_IL_XJG_VE2WD4B_ZGNA4_X_YQ52U_KV98_X1907VVFR_PB7ZG_BS94W_QTE8_IIXTOAFL3J_BC15F_H3J_BC17WGHE84_A_UVE_M_HK6W_MVE_MEL_XV_CCF7ZG_BSYF_H3G_BW9BNI1S_RV6ZT2R_VAU_OVB_H3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QVER1_ZF9_X_GL1S_EL_XV_C_CT7GRFFT_D7ZG_BS94_K7R6XUBIN3947_GNBY_L2NV_V2_V3P7A_G_AI_RIANW_ATE8_II_XV_F13V_OX_LKW07_GID_SQ_WF_VY8FB_N7_L_JO_GXKSJHJ_FZT_F4NJP_WJ5U90_QAA9P_G4M_D6_H_HJ_BC94A2_L_BRY_WUPU_J7_Z_NJSE_NTJW_DN_H_BQ_KX_QNBNB0_XJH_EMV_VU7XM_LE_UE_HY27ZC_GZU_GP3_SX5UR_DQYXCIE_XV_OD9_UQ1_LS9_VB_DW7_FUH_OFGTK9_OHK_PHD0DF7_BQG_SV9_UA25_V_RKM9_P_YL_MA_LABY_S_PV_Z_GBZZRQ_FY2FB7YZ18_Z_LH0FKS_GBZG_BS94W_XT_W7_SO_TC_U_PJ_Y_DY_U_ZQLN_WP_M_QZB_YM_V_NEDJ_OZ_JRSH_WPRDREY_J7_NM_G7VJYE_S2_NDTIA7V_T5D_JS_VAAX_PT3U3_PW4_P_TP_TU_Z2HIQN_TF_D6_T7NG_IVE_MEL_XV_B_GB_DS5_FJZ_NXG7EWSO_GZO_SU_C8N_TJS_LLB9_PU_G7_KUG4AA_A8_BJ9JP_M819_BC_YL08_AR0NJ7B44_PJZ5Y_WZ6LG_RW5GKE_MEL_XV_DWL7YBH9_NGA58HJV_JPC_WDA_S_ZAW_J3_Y99_Z0_A59_OJ_YPH45_P_NN_ABWGB0K4B26_M65R_H_CRDF2_PE_AN5X0_T4_A_UVE_M_FBFBU_SUJE1_TR_YER9J_ZD_JH2_R3_ZOO4_CZ_BZ_OHS_FZ0_B0UXNNH_PTPO_ARIH_DP_DAD_LPT0E2RFE_TY79_X70349ODF7ZG_BW9W_PTU91JC_XP7P7JG1_EDMQJM_J2MS9YZ6_DBC_A64_FZ_X_KYTL_NPY_F74A_EW_MN_INUXPS_YWNT8D_O9_A9_E2_PA_FE8_II_XV_LUP7GE3CY9_BBP_HHH_K6_T6B_Z6_NKE7GS_J3_RC_SE_BS_HYMI_W8_W04_G9_I_LJF_PC_PRL5ZF_H1_KB6_HB8BJ9G_M_DCB7R_LS_AL_XV_BE_JJIN649_LLF_L1_XA7M_NA1_G82_DXA372_TAL3I_Y7I_D2GB_ENB_PPFC_DM_UO5M_DX9SU_MJ_WCV_P1_DC74A4KY_IBW2_RB_TT_VEVZ_NJ0BI6_ZB_TNT_EXM_O71R9_Y7O_I_XV_DUP79B_O0_VH5R_DHL_LDJ_I_JVF_WJ41R_K8_M78_CL_G_RV_SWFG9SZ3_ZH_NA41_F_RWTW70YZ3TAH_CF_CCF7ZGR_T14_SF_T7IK_O_MFYMEYYY_RX_O6_TYC_EN0T_U_MXX3_DB4G_T_FWNJ_F4C_WN9UU1ZFC_V5W_PMHJ_R_XTPC_MM_TF3J8DJH_IF_CCF7ZGR_T14_N7AEJPF_TRALR3_XJYCG_WNIGUFNGUWBV8_ZHH8DE_F_FJ_MC6_ILU_V_XZJ_RV7Y8_ASST6_L8E_PNJ_PT_QA3IGE_DN_IB_YC_G4OHCF_CCF7ZGR_R14X9_PM8U_G_DXALJ_W9P_HS7Q_Z6S_TTK8N_A_JE0_R9_ZW_MV7Z_Z_PX_D9U6_PNFKTM77FMHIA7_ILR_XFX2ZR_THRUU_BYFJRF_LM_GNJ5_MJ7UMP5J1_LJ0_RY5_NP1TS7_HMSHG_YVE_MEL3TQ_BDEPS_VH1T_PH1_PTV_S_HDN_DB_QVQ9_L7CXRJVE_O9_XJRN0VOBLWZXDEJ6C_O90F24_PEEQNI_M_MFC4Z_FRF7_FE85O_G4TEF_HJ_BC17W1GA8_TY_V0JS_PL_V4R_I_VU_SFU1FKN7T_X12_G99_FJK_S14_M2AUFI_WU_WBV1GU_NNA15_L6_H4_Y2F074NT_PVH_IZN371C27RLZ7_LB4R6_WVXTCF2XZ_ZPCI_W95_TW_JV_PU_B9_JMN_XA_V1F_L_BX_I_LA_UD4_WAF7ZG_BWVW7UUF_CB_DU_MJX_YZZZ_OSW5_CMH8_L79KF3O5_WL8HPGV_VSIU2_ZR_AV_RWWJV_NMQ97_K7_IZL57NTLU_K216_V3V62SIU_T_ZU2_LW7M_V7_QVD_X7ELXE4R_HFI_K90_RB_DI5_P_RDV_QE_GXQ_PQ1E8_IK3MU_CF7H2R0P_Y8Y9_Y1_OXORM4TF5_P3S9G_XDS5P1DHB_H_WLD0_FY9OK782WRE4O9M_FXQR4PL8S487_GVZ43830N1QC7ND_WU2_TL_DKDZE_SK7C_EEA4D53R_PGJ_W4_HV_W_XP_PUA2X_IA_W4G_YRGHN_N9_TR9UK_C_CF_C_CT4_LG3_ZSF3Y2_DLJ3B_EDL_DX4SB_C07_WE_D3_Z_HD59_FZ_EKN92BN_LLKC_OAG5V_PQUY3826TTN6ZFJAV_SD_PJMBEMXY7DD1L_VCPNZFX3_HRNU_I_PF4E9_YI9TKWGTE_G_XB_XW7UOEI0D5D_PI_VP2_I7_OHW4HHVJT7_SRM_LWV_CA_BD97_JLJ7MJ973_HS0SGDAIU_VY_N_JEE_M3_KI88N_OPHMS_QDI45_HI8AD62NP7LW_X2_ZUJ3L91_FJ_PS0J_LPC_XT6B6_PXDFE_KQ5K_W39S_K_AB_GPMYF4_A_WV_DBU64D3_T_MXA_NP4RAS_JB2LB_AM78_K2E_LO4HJRUFIR145_G_YSA2_P_RGB54LNG00_DM3_DM_Y8_EZ_LP5_YFM0SXU_IYX_PL_VC_DFTI_WZLO_THZ_RU7A19LB_MAQY_GZK_M_DT_S7FT_KC5_R_LO3Y4YD4S83DPDUE_W_IK_OK9_P2_D7_BC14BDV_X_DE6J86_ZLI1U_L_QW2_PLHM_XZ_HS5L3XAM_P_LXF0_Q_JGF_SB_DB_NA_B85_U_YAZ_PHO81_BK_P98_VM95O_LD9W_NP57_YU_NK30OZ3_TLPTRZ8_VMKV_QCN_MRV5SX_J8_HB_U_JZ_ZS_L19_J_DQ_GW_QTE8_NQWQXZE3_QNE3E_X8YXB0LR6_Y1_YJ3_BY9GQ1U_UCIU2_VY_O5EN2AF_L0_R273L_GV_E5_G9_JTTK_T2_Y_LR9OJ_K6_C9_MMSA9A_RA9_L7A2_F_MDNJ7CCJEZ61_ZH972VPKWG_W88GFF3A6US_FV_K0_DSD_JM17WGTE_G_XE3W7JG5_FI3L_F8_YZ3M_C995J_B_ZIL_S4_TT24_VP_BNZV4CIUY_CYN70_X2CZ3ZZYZ88VEY7J_QC_T4_DB_GDM_KG5SW8BT6_TBF_WZYVI_P_NRNU_KXI8_S5_HZ14U_Y1_RZFF_LU4G_G_PL_R4_MX_MU_EYL3J_BA8_OUCNG_P9O7_HKSBIWX_NWU6_O5U_L_CH_Q_WTX_US0NNN76_IX_GIF_JI7Z0C_WR3_NCA1B54O_PP_IF_HR5SI9_UZ6E_LRRV1N_LD_N_WFPZZJ_EC_SRCDJVV_KL94ZF27_RO84_L2C_G950WZND63EPVR7_RYAL_YC6G4_XES3KYZ0_FSIMXMQ3_OP178_Q_SW_HC_F4A_D7_ZEE_MWTJXS_PR_LB2_U_OK9ZCFJEYQ_FZH956_Y0C24R_LKEEEW_PXW_P_HI8F_J0_S899V_HIB_IO7_DSC7_HC_VC9CC7_GE53SH9_GR9LUQ_PS4_A_VVHE34_TX0CI_O_HXY_WG8_NZ5T_T9_UH_OF_NZ27_IX4_NP9NPNWVJUPSHM56_PXS8FD_BY_O751_BXYTJTB8CPBWHSIT_X_RNB_FTSJU_O5_I33J8JVE056J_DL_HIHFOYCF_D_CD67_E9RZJ5_XW8_Y3_W4_XJHY_BB4W_QTE8_NY_GV_OV_TTHJ7_W3_E5BRBG_WGSA_C4UCNGGO_XV_DNRJ9T72_RNRBFVR_CI5CS2V08X11OF_R0_NG_RSI_OICVBRNV5YFSV_B4R_HZ2E716F3N_O0RRDDE_O3TH1CH_S84_A_UVE_GS_D3H_OD47_FO_X3_H89_N3DKD2B_W_PXX7_H7_E8_LX7_IG_F2Z_FJ_HV_FJ_PEKT90_XGJ3XTB_V7_IRVT_NX_GN078NESV_LFC6YPC93XG2V_J_GHV_P_FJ_MU_PP_HVQ_EP_XM8DI_YN_JQ_VH84_N_PJUAFL3J_BWXW5I3_Y3_RC_DY5_P_RNV8_HL7EM_XTNP17F3MS_OF_PH_RY9_F9N8R_IVHQS8F_M56_O7_MDR_IRTUE0_LZG8HK_N7WC_USTZOTL5ADM_ZA7VZZ_TVIMTW4_KJP_X_XB8V_FQPR_IE_HJ_BC17W1HA8A_G_GEBU_K07AYJ_R0_JWV0_FV_PCCJUYU_NH6E_ZQ_K3_H_LJ_AA_EOZ3EB_I7M4UJV_XENS_YTJ_REX_XG_OX_XH6_V_WN4S_OL8_OD3ON3_FH9_PU29_EB_QKROO_M_XV_OA_FBY3_BM3FR_OZ1XF_GA8HSEN_ER_QJ0_ZV_TR_POH_OA9L3_HKJ3D1WVIXJ0VR9_NL_RO_VH6_PDF_H_AE84_A_UVE_GS_G3PB8BJJV_Z7I0_M_PEGCIU3_BP_ZN_WM2_OFO_FXV52_QH3_HNIYUZ3FW_Y78W_DC_T_ST_S37O4FVDSFO_O_RD_NG_BE84_L1_M8_FX7_CEI_VTV5N_LQ_A4TZ_VNB_H2_YPG5V3YH_I7_LV7_S4_O_NCXU_LI5U_F_QJF82_GIY_GHY_JEE_UL_JU5_K_TW_I7_OKAQ_AO5AV96_CRZGVEZW5V0IZ_TIPPN_SK_UTB_IVV_ORSHCAG_AM5_LM_GANC_WNTZ_FFSJLNV_F8E_ZL7TJ6C_O9_FX_NJ_A284_A_UVE_L8_SV_L0J_EG_TB_V1XP_PXYK_X6PJ_WY7Y_Z8B2OQO_JX1U_LJ_Q4IU_NWW_XMF1DS790_WOOO_MRO_NHWFILXCQQPFLC_EL_XV_CC9YV_BM3ESBZXHPNT_PQXH5J_U2DK304ZTHBG_DMRF_NB_CLX358RD9L_O5ZD2_RX7_YV_FE4V_DCUAU_O_GT7PICIR_AC17WGRE4_M072JSE_P93A_G_ZV_LR5_GWRMKWO_XSWSV5_XWRX7YVGZ_MET_X2_DCL_FX_L_PF_KBO53D0_Y2R7N0H7_S8E_TT_OXEX3U2_NSCUQYB3G_BS94W_VS_R8_OB1N_J6_IWWFJ_LNV93ZYSAU3P_NNVB_U0_FN_PM4DN9K_NZ_U_WP6_DL5U_W3P552_BXFUNJA_W_ZBFBTD_PSR08X5BN_OS2L_OS_QO_R_NZ81SL_YSRTV2R_Y8_II_XV_O_CT_G_HJ_PT_K6X_P67F1H_UV_HF70N_NQ_VOSI_W9A_SC_E2OZTH_TI_JZ_PHSAJ3YV69_I0_P44FF6UGG3A1VJRF_JJ53_Z_HDV3_P_RM_V7ZFDNPATZWGHE84_L3K6Z8Y_MV_K_FF8BTGPX8_G974TBT_XB_HPN_ISA9NA_MXI_MF9S_YVL3_XG1Z_Z2X_D83X72T_AE_M17RIMC_ODM_SX_UON4TCK9F3_J_FM0IV39L_XE9GDE8_N_YKV_JWH_RVNW0_Y7_T1J8_XTRJ3NE6_YGOUFI_U30_DI99G_K_TK9_FYAJ_SE_SCJ_O6_AN7NM3_OXOGQIO7B_PA_L2_COPE0_LV_OC1_Y1YG_QZ1JS_TH_BUZL_BUM_RNB8XQYTMBU2_MA17TI_OV_T27LP_VRTMD18L_G7Z_YRP_N59_B4_TF5_G_ZVS_CL3J_BO60_NJK5_G38H_EDJ1WJA1FIJ_M9G_VE8_IL3J17X7J_PG9_WF_YI_XV_OA_FB8_XT_GNWY4_I_XV_OAFL3J_BAS_CL3JT_GOAFL3J_BC17WGHE84_K3U_DFT_SR3L7XGUC_KNU_J35WGXE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QVE_ST2X633_HV_N_TF_HZ_BX9P_XQ_BF7ZG_BS94W_QTE8_ILXO_M_XV_OAFL3J_BC17WGHDC4_A_UVE_O144_P_XZ_BY94W_QTEC_IE_XV_OAFL3J_BC17W_VUG_WEUJ1U_HX9_O6FDF_W9_AQ8_B_XJ_CAF7ZG_BS94W_QTE8_BRG_F_XJ_BC17WGHE84_A_UVE_MEL_XT9F8_II_XV_OAFL3J_BC17WGLD1_BM1_PZ_FM9R_XGUX1S_TY6_UC_YI_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL3VQ_FT9_ZFA_LV_SD4XAH6N_WN1IQF_WIF_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OA_FBZ3_DW85_ABYNZGQ_HB_Z_KNJ_U0W_UW4_A_UVE_MEL_XV_A_KV_OAFL3G_F_XV_CCF7ZG_BS94W_QTE8_AQ84_A_UVE_MEL_XV_CCF7ZG_F_XJ_BC17W_RO1D_QF_HR_J5IRVRE_P6B5_AW_QUS4_A_WVW_ATE8_NQXW_GV7_AC94W_QTE8_II_XV_OC1_Y9NWB_BGTF2_DF7ZG_BS94W_QTE2_T7_AC147_FNHT_HAFL3IR9_QD_X6ES3_SF_I_VZQ8TF79_AY94W_QTE8_II_XV_OACL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZGTF7G_BS94W_QTE8_II_XV_OA_FRUHL3J_BC97PS_FXWNS1_Q6_LJ67PFL_XWV_NGXE81H84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BBV7WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_TTD61R379A5_WX_NFR_TXGXE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_NBR_BR7_VV1Z_AYQX_QGCVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_IK3_XU_GT9F_UHX33_D_UES_XQ_IA_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL3SRDS_OR9_BH_VW1_PBJ1R2_VU8WGXE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_VTT8_EO_SE_CVJ4_J_UK8_EQ_SW_CT_J4_J_UK8_EQ_SW_CT_J4_J_UKG_VE_SW_CT_J_AQ8KG_VE_SW_CT_J_AQ8KG_VE_SBF5_J_AQ8K_CBY_SBF5_J_AQ8K_CBY_SBF5_J_ENGL_CBY_SJPBK_ENGL_CBY_SJPBK_ENGL_SE_CVJPB_KKS_AR_SE_CVJPB_KKS_AR_SE_CVJIF_XKS_AR_SQ_KV_JIF_XKS_AR_SQ_KV_JN_VMW92_DRHS5_AW_WQAAAABJRU5_ERK_JGGG = '';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVendorIdentityCodeAllowableValues()
    {
        return [
            self::VENDOR_IDENTITY_CODE__078B46087C11EC4EE282DD243814063C1D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImageAllowableValues()
    {
        return [
            self::IMAGE_I_VBO_RW0_K_GGO_AAAANS_UH_E_UG_AAAV4_AAA_FE_CAYAAADNK3CA_AAAXQ_UL_EQVR42U3D6_ZNV5_Z3_A8_T_MZ_NXBV_JGYF5_PZ_V_LZBT7_MVK_WM5L_VQ_UJ_VB_VTLZHD_MH0_US_DE1_SI_IMO_UFU_SIY_CY_IGIGO_HV_BX_QR_TJ_EI_XSD_CM0_YNNNL3_TTO735JN3_XJQQFNRA3XZR_XQQM577J3DFC7N_PN36N_ES_WKQ_TL_WU_ZB_I_ENGL_S_TW_SP_LAK0NGL_SSBV5_LAK0K_CRY_SBV5_LAK0K_CRY_SBV5_IE_XKK_CRY_Q_JV_JIE_XKK_CRY_Q_JV_JIE_XKK_SE_CU_JV_J_IK8_EO_SE_CU_JV_J_IK8_EO_SE_CVJ4_J_UK8_EQ_SW_CT_J4_J_UK8_EQ_SW_CT_J4_J_UKG_VE_SW_CT_J_AQ8KG_VE_SW_CT_J_AQ8KG_VE_SBF5_J_AQ8KQBRHZB_KSPSELVOV9FE0NTB592NAC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OA_FRW0_HV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_BO14_ZD6TF7B_BW_OHZ_VVJ2_HD6XO_M_XV_OC14_M_XV_OAFL3J_BC17WGHE84_PWN_BY94W_WVB68_NB7ZG_BS94FE_PBC17W2VBC17WGHE84_K1_WU_OP9X3_EBSGVFW4_A_UVE_MEL_XV_CCF7ZG_BA9_B7ZG_BS94W_QTE8_II_XV_OAFL3HT_OOAFL3J_BC17WGHE84_A_WV_D_QE84_A_UVE_M_FBN_RT_OTC_NZ7D_X7ZX84_A_UVE_M_FRW_GV_D_QE84_LXG_BE84_A_UVE_O04_L_XHG_BE89HWGHE84_A_UVE_M_FRWW_EVE_O04_L_XH2_PHA6C_P_XV_CC1WT1_VL6_VV_PB7ZGTE_GAF7Z2_HCCF7ZG_BS94W_QTE8_ILXG_NE_GW54W_QTE8_II_XV_OA_FR0_HV_D_YC8_II_XV_OAFL3J_BC17WGTC_TR33_C_OD3R_VK_XM_NT7G_NE_GW54W_QTE8_II_XV_OA_FR0FV_D_YC8_ILXG_NE33JWGHE89NWGHE84_LXG_NC3_HRZG_BA1_BY94W_QTEW94P2DRV_RR6_T_BAVRA_XRX9_B7ZGTE_NB_HRZG_BS94_LQ9E8_IL_XHG_M_OY4_M_XV_OA_FRXBC17WGTFYLGCVE_MEL_XSU_DF7ZG_BAL_LWAAQ9_YMN2M_GY7PPPF76_BV6_BF7ZG_F_XJ_BC17W_CRW_CL3J_BC16_BF7ZG_F_XG_F_XV_CCF7W_CL3J_BKCCF7ZG_BS946X_WU6D4X_LXYTF7_EUO3W_VFR_X5W_IK8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_GS_X3UNEC_OR9IA_H_SF76EE_GR7_AH_PWGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_VUS_FB6JLFP8_FF7JLR_TZ_VVNDF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC97QHA_HS4AN3_F5QU9_RDARBT2WUHGXE84_A_UVE_MEL_XV_CCF7ZGT_WOBF7ZG_BS94W_WV_D_BI94W_WV_H_AQT_A7ZG_BS94W_QTE8_IL_XJG_VE2WD4B_ZGNA4_X_YQ52U_KV98_X1907VVFR_PB7ZG_BS94W_QTE8_IIXTOAFL3J_BC15F_H3J_BC17WGHE84_A_UVE_M_HK6W_MVE_MEL_XV_CCF7ZG_BSYF_H3G_BW9BNI1S_RV6ZT2R_VAU_OVB_H3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QVER1_ZF9_X_GL1S_EL_XV_C_CT7GRFFT_D7ZG_BS94_K7R6XUBIN3947_GNBY_L2NV_V2_V3P7A_G_AI_RIANW_ATE8_II_XV_F13V_OX_LKW07_GID_SQ_WF_VY8FB_N7_L_JO_GXKSJHJ_FZT_F4NJP_WJ5U90_QAA9P_G4M_D6_H_HJ_BC94A2_L_BRY_WUPU_J7_Z_NJSE_NTJW_DN_H_BQ_KX_QNBNB0_XJH_EMV_VU7XM_LE_UE_HY27ZC_GZU_GP3_SX5UR_DQYXCIE_XV_OD9_UQ1_LS9_VB_DW7_FUH_OFGTK9_OHK_PHD0DF7_BQG_SV9_UA25_V_RKM9_P_YL_MA_LABY_S_PV_Z_GBZZRQ_FY2FB7YZ18_Z_LH0FKS_GBZG_BS94W_XT_W7_SO_TC_U_PJ_Y_DY_U_ZQLN_WP_M_QZB_YM_V_NEDJ_OZ_JRSH_WPRDREY_J7_NM_G7VJYE_S2_NDTIA7V_T5D_JS_VAAX_PT3U3_PW4_P_TP_TU_Z2HIQN_TF_D6_T7NG_IVE_MEL_XV_B_GB_DS5_FJZ_NXG7EWSO_GZO_SU_C8N_TJS_LLB9_PU_G7_KUG4AA_A8_BJ9JP_M819_BC_YL08_AR0NJ7B44_PJZ5Y_WZ6LG_RW5GKE_MEL_XV_DWL7YBH9_NGA58HJV_JPC_WDA_S_ZAW_J3_Y99_Z0_A59_OJ_YPH45_P_NN_ABWGB0K4B26_M65R_H_CRDF2_PE_AN5X0_T4_A_UVE_M_FBFBU_SUJE1_TR_YER9J_ZD_JH2_R3_ZOO4_CZ_BZ_OHS_FZ0_B0UXNNH_PTPO_ARIH_DP_DAD_LPT0E2RFE_TY79_X70349ODF7ZG_BW9W_PTU91JC_XP7P7JG1_EDMQJM_J2MS9YZ6_DBC_A64_FZ_X_KYTL_NPY_F74A_EW_MN_INUXPS_YWNT8D_O9_A9_E2_PA_FE8_II_XV_LUP7GE3CY9_BBP_HHH_K6_T6B_Z6_NKE7GS_J3_RC_SE_BS_HYMI_W8_W04_G9_I_LJF_PC_PRL5ZF_H1_KB6_HB8BJ9G_M_DCB7R_LS_AL_XV_BE_JJIN649_LLF_L1_XA7M_NA1_G82_DXA372_TAL3I_Y7I_D2GB_ENB_PPFC_DM_UO5M_DX9SU_MJ_WCV_P1_DC74A4KY_IBW2_RB_TT_VEVZ_NJ0BI6_ZB_TNT_EXM_O71R9_Y7O_I_XV_DUP79B_O0_VH5R_DHL_LDJ_I_JVF_WJ41R_K8_M78_CL_G_RV_SWFG9SZ3_ZH_NA41_F_RWTW70YZ3TAH_CF_CCF7ZGR_T14_SF_T7IK_O_MFYMEYYY_RX_O6_TYC_EN0T_U_MXX3_DB4G_T_FWNJ_F4C_WN9UU1ZFC_V5W_PMHJ_R_XTPC_MM_TF3J8DJH_IF_CCF7ZGR_T14_N7AEJPF_TRALR3_XJYCG_WNIGUFNGUWBV8_ZHH8DE_F_FJ_MC6_ILU_V_XZJ_RV7Y8_ASST6_L8E_PNJ_PT_QA3IGE_DN_IB_YC_G4OHCF_CCF7ZGR_R14X9_PM8U_G_DXALJ_W9P_HS7Q_Z6S_TTK8N_A_JE0_R9_ZW_MV7Z_Z_PX_D9U6_PNFKTM77FMHIA7_ILR_XFX2ZR_THRUU_BYFJRF_LM_GNJ5_MJ7UMP5J1_LJ0_RY5_NP1TS7_HMSHG_YVE_MEL3TQ_BDEPS_VH1T_PH1_PTV_S_HDN_DB_QVQ9_L7CXRJVE_O9_XJRN0VOBLWZXDEJ6C_O90F24_PEEQNI_M_MFC4Z_FRF7_FE85O_G4TEF_HJ_BC17W1GA8_TY_V0JS_PL_V4R_I_VU_SFU1FKN7T_X12_G99_FJK_S14_M2AUFI_WU_WBV1GU_NNA15_L6_H4_Y2F074NT_PVH_IZN371C27RLZ7_LB4R6_WVXTCF2XZ_ZPCI_W95_TW_JV_PU_B9_JMN_XA_V1F_L_BX_I_LA_UD4_WAF7ZG_BWVW7UUF_CB_DU_MJX_YZZZ_OSW5_CMH8_L79KF3O5_WL8HPGV_VSIU2_ZR_AV_RWWJV_NMQ97_K7_IZL57NTLU_K216_V3V62SIU_T_ZU2_LW7M_V7_QVD_X7ELXE4R_HFI_K90_RB_DI5_P_RDV_QE_GXQ_PQ1E8_IK3MU_CF7H2R0P_Y8Y9_Y1_OXORM4TF5_P3S9G_XDS5P1DHB_H_WLD0_FY9OK782WRE4O9M_FXQR4PL8S487_GVZ43830N1QC7ND_WU2_TL_DKDZE_SK7C_EEA4D53R_PGJ_W4_HV_W_XP_PUA2X_IA_W4G_YRGHN_N9_TR9UK_C_CF_C_CT4_LG3_ZSF3Y2_DLJ3B_EDL_DX4SB_C07_WE_D3_Z_HD59_FZ_EKN92BN_LLKC_OAG5V_PQUY3826TTN6ZFJAV_SD_PJMBEMXY7DD1L_VCPNZFX3_HRNU_I_PF4E9_YI9TKWGTE_G_XB_XW7UOEI0D5D_PI_VP2_I7_OHW4HHVJT7_SRM_LWV_CA_BD97_JLJ7MJ973_HS0SGDAIU_VY_N_JEE_M3_KI88N_OPHMS_QDI45_HI8AD62NP7LW_X2_ZUJ3L91_FJ_PS0J_LPC_XT6B6_PXDFE_KQ5K_W39S_K_AB_GPMYF4_A_WV_DBU64D3_T_MXA_NP4RAS_JB2LB_AM78_K2E_LO4HJRUFIR145_G_YSA2_P_RGB54LNG00_DM3_DM_Y8_EZ_LP5_YFM0SXU_IYX_PL_VC_DFTI_WZLO_THZ_RU7A19LB_MAQY_GZK_M_DT_S7FT_KC5_R_LO3Y4YD4S83DPDUE_W_IK_OK9_P2_D7_BC14BDV_X_DE6J86_ZLI1U_L_QW2_PLHM_XZ_HS5L3XAM_P_LXF0_Q_JGF_SB_DB_NA_B85_U_YAZ_PHO81_BK_P98_VM95O_LD9W_NP57_YU_NK30OZ3_TLPTRZ8_VMKV_QCN_MRV5SX_J8_HB_U_JZ_ZS_L19_J_DQ_GW_QTE8_NQWQXZE3_QNE3E_X8YXB0LR6_Y1_YJ3_BY9GQ1U_UCIU2_VY_O5EN2AF_L0_R273L_GV_E5_G9_JTTK_T2_Y_LR9OJ_K6_C9_MMSA9A_RA9_L7A2_F_MDNJ7CCJEZ61_ZH972VPKWG_W88GFF3A6US_FV_K0_DSD_JM17WGTE_G_XE3W7JG5_FI3L_F8_YZ3M_C995J_B_ZIL_S4_TT24_VP_BNZV4CIUY_CYN70_X2CZ3ZZYZ88VEY7J_QC_T4_DB_GDM_KG5SW8BT6_TBF_WZYVI_P_NRNU_KXI8_S5_HZ14U_Y1_RZFF_LU4G_G_PL_R4_MX_MU_EYL3J_BA8_OUCNG_P9O7_HKSBIWX_NWU6_O5U_L_CH_Q_WTX_US0NNN76_IX_GIF_JI7Z0C_WR3_NCA1B54O_PP_IF_HR5SI9_UZ6E_LRRV1N_LD_N_WFPZZJ_EC_SRCDJVV_KL94ZF27_RO84_L2C_G950WZND63EPVR7_RYAL_YC6G4_XES3KYZ0_FSIMXMQ3_OP178_Q_SW_HC_F4A_D7_ZEE_MWTJXS_PR_LB2_U_OK9ZCFJEYQ_FZH956_Y0C24R_LKEEEW_PXW_P_HI8F_J0_S899V_HIB_IO7_DSC7_HC_VC9CC7_GE53SH9_GR9LUQ_PS4_A_VVHE34_TX0CI_O_HXY_WG8_NZ5T_T9_UH_OF_NZ27_IX4_NP9NPNWVJUPSHM56_PXS8FD_BY_O751_BXYTJTB8CPBWHSIT_X_RNB_FTSJU_O5_I33J8JVE056J_DL_HIHFOYCF_D_CD67_E9RZJ5_XW8_Y3_W4_XJHY_BB4W_QTE8_NY_GV_OV_TTHJ7_W3_E5BRBG_WGSA_C4UCNGGO_XV_DNRJ9T72_RNRBFVR_CI5CS2V08X11OF_R0_NG_RSI_OICVBRNV5YFSV_B4R_HZ2E716F3N_O0RRDDE_O3TH1CH_S84_A_UVE_GS_D3H_OD47_FO_X3_H89_N3DKD2B_W_PXX7_H7_E8_LX7_IG_F2Z_FJ_HV_FJ_PEKT90_XGJ3XTB_V7_IRVT_NX_GN078NESV_LFC6YPC93XG2V_J_GHV_P_FJ_MU_PP_HVQ_EP_XM8DI_YN_JQ_VH84_N_PJUAFL3J_BWXW5I3_Y3_RC_DY5_P_RNV8_HL7EM_XTNP17F3MS_OF_PH_RY9_F9N8R_IVHQS8F_M56_O7_MDR_IRTUE0_LZG8HK_N7WC_USTZOTL5ADM_ZA7VZZ_TVIMTW4_KJP_X_XB8V_FQPR_IE_HJ_BC17W1HA8A_G_GEBU_K07AYJ_R0_JWV0_FV_PCCJUYU_NH6E_ZQ_K3_H_LJ_AA_EOZ3EB_I7M4UJV_XENS_YTJ_REX_XG_OX_XH6_V_WN4S_OL8_OD3ON3_FH9_PU29_EB_QKROO_M_XV_OA_FBY3_BM3FR_OZ1XF_GA8HSEN_ER_QJ0_ZV_TR_POH_OA9L3_HKJ3D1WVIXJ0VR9_NL_RO_VH6_PDF_H_AE84_A_UVE_GS_G3PB8BJJV_Z7I0_M_PEGCIU3_BP_ZN_WM2_OFO_FXV52_QH3_HNIYUZ3FW_Y78W_DC_T_ST_S37O4FVDSFO_O_RD_NG_BE84_L1_M8_FX7_CEI_VTV5N_LQ_A4TZ_VNB_H2_YPG5V3YH_I7_LV7_S4_O_NCXU_LI5U_F_QJF82_GIY_GHY_JEE_UL_JU5_K_TW_I7_OKAQ_AO5AV96_CRZGVEZW5V0IZ_TIPPN_SK_UTB_IVV_ORSHCAG_AM5_LM_GANC_WNTZ_FFSJLNV_F8E_ZL7TJ6C_O9_FX_NJ_A284_A_UVE_L8_SV_L0J_EG_TB_V1XP_PXYK_X6PJ_WY7Y_Z8B2OQO_JX1U_LJ_Q4IU_NWW_XMF1DS790_WOOO_MRO_NHWFILXCQQPFLC_EL_XV_CC9YV_BM3ESBZXHPNT_PQXH5J_U2DK304ZTHBG_DMRF_NB_CLX358RD9L_O5ZD2_RX7_YV_FE4V_DCUAU_O_GT7PICIR_AC17WGRE4_M072JSE_P93A_G_ZV_LR5_GWRMKWO_XSWSV5_XWRX7YVGZ_MET_X2_DCL_FX_L_PF_KBO53D0_Y2R7N0H7_S8E_TT_OXEX3U2_NSCUQYB3G_BS94W_VS_R8_OB1N_J6_IWWFJ_LNV93ZYSAU3P_NNVB_U0_FN_PM4DN9K_NZ_U_WP6_DL5U_W3P552_BXFUNJA_W_ZBFBTD_PSR08X5BN_OS2L_OS_QO_R_NZ81SL_YSRTV2R_Y8_II_XV_O_CT_G_HJ_PT_K6X_P67F1H_UV_HF70N_NQ_VOSI_W9A_SC_E2OZTH_TI_JZ_PHSAJ3YV69_I0_P44FF6UGG3A1VJRF_JJ53_Z_HDV3_P_RM_V7ZFDNPATZWGHE84_L3K6Z8Y_MV_K_FF8BTGPX8_G974TBT_XB_HPN_ISA9NA_MXI_MF9S_YVL3_XG1Z_Z2X_D83X72T_AE_M17RIMC_ODM_SX_UON4TCK9F3_J_FM0IV39L_XE9GDE8_N_YKV_JWH_RVNW0_Y7_T1J8_XTRJ3NE6_YGOUFI_U30_DI99G_K_TK9_FYAJ_SE_SCJ_O6_AN7NM3_OXOGQIO7B_PA_L2_COPE0_LV_OC1_Y1YG_QZ1JS_TH_BUZL_BUM_RNB8XQYTMBU2_MA17TI_OV_T27LP_VRTMD18L_G7Z_YRP_N59_B4_TF5_G_ZVS_CL3J_BO60_NJK5_G38H_EDJ1WJA1FIJ_M9G_VE8_IL3J17X7J_PG9_WF_YI_XV_OA_FB8_XT_GNWY4_I_XV_OAFL3J_BAS_CL3JT_GOAFL3J_BC17WGHE84_K3U_DFT_SR3L7XGUC_KNU_J35WGXE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QVE_ST2X633_HV_N_TF_HZ_BX9P_XQ_BF7ZG_BS94W_QTE8_ILXO_M_XV_OAFL3J_BC17WGHDC4_A_UVE_O144_P_XZ_BY94W_QTEC_IE_XV_OAFL3J_BC17W_VUG_WEUJ1U_HX9_O6FDF_W9_AQ8_B_XJ_CAF7ZG_BS94W_QTE8_BRG_F_XJ_BC17WGHE84_A_UVE_MEL_XT9F8_II_XV_OAFL3J_BC17WGLD1_BM1_PZ_FM9R_XGUX1S_TY6_UC_YI_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL3VQ_FT9_ZFA_LV_SD4XAH6N_WN1IQF_WIF_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OA_FBZ3_DW85_ABYNZGQ_HB_Z_KNJ_U0W_UW4_A_UVE_MEL_XV_A_KV_OAFL3G_F_XV_CCF7ZG_BS94W_QTE8_AQ84_A_UVE_MEL_XV_CCF7ZG_F_XJ_BC17W_RO1D_QF_HR_J5IRVRE_P6B5_AW_QUS4_A_WVW_ATE8_NQXW_GV7_AC94W_QTE8_II_XV_OC1_Y9NWB_BGTF2_DF7ZG_BS94W_QTE2_T7_AC147_FNHT_HAFL3IR9_QD_X6ES3_SF_I_VZQ8TF79_AY94W_QTE8_II_XV_OACL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZGTF7G_BS94W_QTE8_II_XV_OA_FRUHL3J_BC97PS_FXWNS1_Q6_LJ67PFL_XWV_NGXE81H84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BBV7WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_TTD61R379A5_WX_NFR_TXGXE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_NBR_BR7_VV1Z_AYQX_QGCVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_IK3_XU_GT9F_UHX33_D_UES_XQ_IA_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL3SRDS_OR9_BH_VW1_PBJ1R2_VU8WGXE84_A_UVE_MEL_XV_CCF7ZG_BS94W_QTE8_II_XV_OAFL3J_BC17WGHE84_A_UVE_MEL_XV_CCF7ZG_BS94W_VTT8_EO_SE_CVJ4_J_UK8_EQ_SW_CT_J4_J_UK8_EQ_SW_CT_J4_J_UKG_VE_SW_CT_J_AQ8KG_VE_SW_CT_J_AQ8KG_VE_SBF5_J_AQ8K_CBY_SBF5_J_AQ8K_CBY_SBF5_J_ENGL_CBY_SJPBK_ENGL_CBY_SJPBK_ENGL_SE_CVJPB_KKS_AR_SE_CVJPB_KKS_AR_SE_CVJIF_XKS_AR_SQ_KV_JIF_XKS_AR_SQ_KV_JN_VMW92_DRHS5_AW_WQAAAABJRU5_ERK_JGGG,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vendor_identity_code'] = isset($data['vendor_identity_code']) ? $data['vendor_identity_code'] : null;
        $this->container['create_at'] = isset($data['create_at']) ? $data['create_at'] : null;
        $this->container['update_at'] = isset($data['update_at']) ? $data['update_at'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVendorIdentityCodeAllowableValues();
        if (!is_null($this->container['vendor_identity_code']) && !in_array($this->container['vendor_identity_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vendor_identity_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getImageAllowableValues();
        if (!is_null($this->container['image']) && !in_array($this->container['image'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'image', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vendor_identity_code
     *
     * @return string
     */
    public function getVendorIdentityCode()
    {
        return $this->container['vendor_identity_code'];
    }

    /**
     * Sets vendor_identity_code
     *
     * @param string $vendor_identity_code vendor_identity_code
     *
     * @return $this
     */
    public function setVendorIdentityCode($vendor_identity_code)
    {
        $allowedValues = $this->getVendorIdentityCodeAllowableValues();
        if (!is_null($vendor_identity_code) && !in_array($vendor_identity_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vendor_identity_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vendor_identity_code'] = $vendor_identity_code;

        return $this;
    }

    /**
     * Gets create_at
     *
     * @return \DateTime
     */
    public function getCreateAt()
    {
        return $this->container['create_at'];
    }

    /**
     * Sets create_at
     *
     * @param \DateTime $create_at create_at
     *
     * @return $this
     */
    public function setCreateAt($create_at)
    {
        $this->container['create_at'] = $create_at;

        return $this;
    }

    /**
     * Gets update_at
     *
     * @return \DateTime
     */
    public function getUpdateAt()
    {
        return $this->container['update_at'];
    }

    /**
     * Sets update_at
     *
     * @param \DateTime $update_at update_at
     *
     * @return $this
     */
    public function setUpdateAt($update_at)
    {
        $this->container['update_at'] = $update_at;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $allowedValues = $this->getImageAllowableValues();
        if (!is_null($image) && !in_array($image, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'image', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['image'] = $image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


